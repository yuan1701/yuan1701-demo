1.安装lib-flexible.js

npm install lib-flexible --save

2.在项目入口文件main.js中引入lib-flexible

import ‘lib-flexible’

3.px转换rem:安装px2rem-loader使用 webpack 的 px2rem-loader,自动将px转换为rem

npm install px2rem-loader --save-dev

4.配置px2rem-loader
首先找到 build/utils.js文件，在utils.js中添加配置

exports.cssLoaders = function (options) {
  ...
  const px2remLoader = {
    loader: 'px2rem-loader',
    options: {
      remUint: 75
    }
  }
  ...
  // generate loader string to be used with extract text plugin
  function generateLoaders (loader, loaderOptions) {
    const loaders = options.usePostCSS ? [cssLoader, postcssLoader,px2remLoader] : [cssLoader,px2remLoader]
  .....
  }
}


以及找到generateLoaders方法，在函数里如下配置

这里最重要的就是要在loaders 加上px2remLoader，不然不会起作用！！！

5.px2rem 用法
安装px2rem后，再使用px上有些不同，大家可以参考px2rem官方介绍，下面简单介绍一下。

直接写px，编译后会直接转化成rem —- 除开下面两种情况，其他长度用这个
在px后面添加/no/，不会转化px，会原样输出。 — 一般border需用这个
在px后面添加/px/,会根据dpr的不同，生成三套代码。—- 一般字体需用这个
示例代码
编译前（自己写的代码）
复制代码

.example{
    width: 150px;
    height: 64px; /*px*/
    font-size: 28px; /*px*/
    border: 1px solid #ddd; /*no*/
}

复制代码

.example{
    width: 2rem;
    border: 1px solid #ddd;
}
[data-dpr="1"] .selector {
    height: 32px;
    font-size: 14px;
}
[data-dpr="2"] .selector {
    height: 64px;
    font-size: 28px;
}
[data-dpr="3"] .selector {
    height: 96px;
    font-size: 42px;
}
复制代码
这样基本配置就完成了，重启项目就可以使用lib-flexible+rem编写移动端页面了
注意：vue移动端 border 或分割线中的 1px 不希望被转成 rem，只要再后面写上注释 /no/ 就可以了

注：对外部引入css，px2rem能不能转换rem问题
如：通过@import方式引入的外部css不能转为rem

解决方法：
通过style的src引入 完美解决！
<style src="./common/style/common.css"></style>

拓展1：vue的style src和style @import有什么区别吗？
  
  @import导入进来css并没有被打上tag标签，也就是说他是一个全局的css，同样会作用到你别的组件中，也就会使你的样式乱套
  而src引入的会被vue-loader打上tag

  例子：
  @import导入的style编译后的内容
  <style type="text/css">
  #test {
    font-size: 100px;
  }</style>
  
  src导入的style编译后的内容
  <style type="text/css">
  #test[data-v-3c208292] {
    font-size: 100px;
  }</style>
  
  
拓展2：




